# -*- getpot -*- (GetPot mode activation for emacs)
#-------------------------------------------------
#      Data file for CE FSI Solver
#-------------------------------------------------

[problem]

method     = monolithicGI # monolithicGE, monolithicGI

blockOper   = AdditiveSchwarzGI
# OPTIONS:
#AdditiveSchwarz
#AdditiveSchwarzRN
#AdditiveSchwarzGI
#AdditiveSchwarzRNGI

DDBlockPrec = ComposedDN2GI
# OPTIONS:
#AdditiveSchwarz: monolithic A-S preconditioner,
#AdditiveSchwarzGI: monolithic A-S preconditioner,
#ComposedDN: modular Dirichlet-Neumann preconditioner
#ComposedDN2: modular Dirichlet-Neumann preconditioner
#ComposedNN: modular Neumann-Neumann + Dirichlet-Dirichlet preconditioner
#ComposedDNND: modular Dirichlet-Neumann + Neumann-Dirichlet preconditioner
#ComposedDNGI: modular preconditioner for the geometric implicit, split in 3 factors
#ComposedDN2GI: modular preconditioner for the geometric implicit, split in 3 factors
#ComposedDNDGI: under testing, do not use
#ComposedDND2GI: under testing, do not use

reducedFluid = 0 # 0 = exact, 1 = inexact
defOmega   = 0.01 # usually 0.01 for precond = 0 or 1; -1 for precond = 2
defOmegaS  = 0.01 # matters only with  precond = 2
defOmegaF  = 0.01 # matters only with  precond = 2
# only for fixed point and exactJacobian:
# if updateEvery == 1, normal fixedPoint algorithm
# if updateEvery  > 1, recompute computational domain every M_updateEvery iterations (transpiration)
# if updateEvery <= 0, recompute computational domain and matrices only at first subiteration (semi-implicit).
#                        Deprecated when using exactJacobian (better to set ifSemiImplicit=1)
updateEvery = 1
linesearch = 0
# NonLinearRichardson: stop_tol  = abstol + reltol*normRes;
abstol     =  0. # tolerance in nonLinearRichardson
reltol     =  1.e-5 # tolerance in nonLinearRichardson

restart    = 0
maxSubIter = 20
fluidMeshPartitioned = none
solidMeshPartitioned = none

[exporter]
multimesh  = false   # actually we export also the displacement
start      = 0
save       = 1
saveEvery  = 1
type       = hdf5
nRestart   = 0

[./fluid]
filename   = fluid-homNeumann
[../solid]
filename   = solid-homNeumann
[../] # solid
[../] # exporter

[importer]
#restartType=restartFSI
#initSol=00700
#initSolFD=00701
#type       = hdf5
#restart_timestep = 0.001
[./fluid]
filename   = fluid-Total
[../solid]
filename   = solid-Total
[../] # solid
# [../] # importer

[fluid]
useShapeDerivatives           = false
semiImplicit                  = false # tells if we advance in time after the first nonlinear iteration or not
domainVelImplicit             = true  # tells if the domain vel is to be considered implicitly in the convective term
convectiveImplicit            = false  # tells if the velocity is to be considered implicitly in the convective term

[./physics]
density   = 1.0               # density
viscosity = 0.035              # viscosity

[../time_discretization]
method          = BDF
initialtime		= 0.0
endtime			= 0.6
timestep		= 0.001
BDF_order		= 2
theta           = 0.5
gamma            = 0.5
rhoInf          = 1
typeOfGeneralizedAlpha            = HHT

[../space_discretization]
mesh_dir  = ./Mesh/
mesh_file = fluidBig.mesh #aorta_fluid_scaled.mesh
mesh_order     = P1
vel_order       = P1Bubble            # P1, P1Bubble, P2
press_order     = P1            # P1, P2
stiff_strain    = true

[../miscellaneous]
verbose   = 1
velname   = vel
pressname = press
steady    = 0
factor    = 1

[../ipstab]
use        = 0
gammaBeta  = 0.15
gammaDiv   = 0.15
gammaPress = 0.075
reuse = true
[../] # physics
[../] # fluid

[interface]
fluid_flag      =  200 # default: 1
fluid_vertex_flag = 200
solid_vertex_flag = 200
tolerance       =  0 # how far points are to be considered the same on the interface
[../] # interface

[solid]

useExactJacobian = true # always false for linear structure model. Otherwise it allows to chose beween an exact-inexact
                         # Newton scheme
rescaleFactor    = 1. # this factor can be used to rescale the structure block
[./physics]

solidType = linearVenantKirchhoff
# either linearVenantKirchhoff,  nonLinearVenantKirchhoff, exponential...
material_flag = 1
density   = 1.2               # density
young     = 4.0E6 
poisson   = 0.45
bulk      = 1e7
alpha     = 2.5e6
gamma     = 1
thickness = 0.045

[../time_discretization]
method          = BDF # Newmark or BDF
initialtime		= 0.0
endtime			= 0.6
timestep		= 0.001
BDF_order		= 2
theta                   = 0.35
gamma                    = 0.75
rhoInf          = 1
typeOfGeneralizedAlpha            = HHT

[../space_discretization]
mesh_dir  = ./Mesh/  # the directory where the mesh file is
mesh_file = solidBig.mesh #aorta_solid_withEdges.mesh  # mesh file
order     = P1
mesh_faces      = all                   # update all faces elements
mesh_edges      = all                   # update all faces elements


[../miscellaneous]
verbose   = 1
depname   = dep


[../newton]
maxiter = 1
abstol  = 1.e-8
linesearch = 0

[linear_system]

[./solver]
output          = all # none
max_iter        = 200
poly_ord        = 5
kspace          = 200
precond         = dom_decomp
drop            = 1.00e-4
ilut_fill       = 2
tol             = 1.e-6


[./aztecoo]
reordering         = 1 # rcm
precond            = dom_decomp
subdomain_solve    = ilut
ilut_fill          = 4.e+0
drop               = 1.e-5
athresh            = 1.e-3
rthresh            = 1.e-3
reuse              = 1
displayList        = false

[../] # aztecoo

[../prec]
reuse           = false
prectype        = Composed
displayList     = false
entry           = 0.

[./robin]
alphaf = 0.
alphas = 0.5 # parameters for Robin-Robin DDBlock preconditioner

[../Composed] #structure, fluid, mesh
list                = 'Ifpack Ifpack Ifpack'
sections            = 'Ifpack1 Ifpack1 Ifpack2'



[../PCD1]

 pressure_boundary_conditions        = neumann_to_dirichlet
 set_Ap_boundary_conditions          = true
 set_Fp_boundary_conditions          = true
 pressure_laplacian_operator         = standard
 use_lumped_pressure_mass            = true

 [./subprecs]
 pressure_laplacian_prec = Ifpack
 pressure_laplacian_prec_data_section = Ifpack
 fluid_prec = Ifpack
 fluid_prec_data_section = Ifpack
 pressure_mass_prec = Ifpack
 pressure_mass_prec_data_section = Ifpack

[../]

[../PCD2] #this is the "subsection" in PreconditionerPCD.cpp
displayList = false
pressure_boundary_conditions         = neumann_to_dirichlet
set_Ap_boundary_conditions           = true
set_Fp_boundary_conditions           = true
pressure_laplacian_operator          = standard
use_lumped_pressure_mass             = true

[./subprecs]
fluid_prec                           = ML
fluid_prec_data_section              = DD2Levels2 #linear_system/prec
pressure_laplacian_prec              = ML
pressure_laplacian_prec_data_section = PCDLaplacian #linear_system/prec
pressure_mass_prec                   = ML
pressure_mass_prec_data_section      = DD2Levels2 #linear_system/prec
[../]


[../Ifpack1]  # preconditioner for the first factor in case our choice was Ifpack
prectype        = Amesos
overlap         = 2

[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[../partitioner]
overlap = 2

[../schwarz]
reordering_type = none #metis, rcm, none
flter_singletons = true

[../] # Ifpack1



[../Ifpack2]   # preconditioner for the second factor in case our choice was Ifpack
prectype        = Amesos
overlap         = 2

[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[../partitioner]
overlap = 2

[../schwarz]
reordering_type = none #metis, rcm, none
flter_singletons = true

[../] # Ifpack2



[../ifpack] # if Ifpack, and if the preconditioner was not of type "Composed"
prectype        = Amesos
overlap         = 2

[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[../partitioner]
overlap = 2

[../schwarz]
reordering_type = none #metis, rcm, none
flter_singletons = true

[../] # ifpack

[../ML] #if ML, and if the preconditioner was not of type "Composed"
default_parameter_list = DD-ML    # for ML precond, SA, DD, DD-ML, maxwell, NSSA, DD-ML-LU, DD-LU
prec_type = MGV # MGV
max_levels = 2

[energy_minimization]
enable = 0
type   = 2

#####THE FOLLOWING IS TAKEN BY THE MAXWELL EXAMPLE#########
[./repartition]
enable              = 0
node_max_min_reatio = 1.1
node_min_per_proc   = 64
max_min_ratio       = 1.1
min_per_proc        = 20
partitioner         = ParMETIS #Zoltan: to be implemented
##Zoltan_dimensions   = 3

[../aggregation]
type                = METIS
treshold            = 0.0
nodes_per_aggregate = 32

[../coarse]
max_size            = 60
## type                = Amesos-KLU
################

[../smoother]
type = Ifpack
pre_or_post = pre

[../] # end if ML
[../] # prec
# end of preconditioner part

[mesh_motion]

[./solver]
output          = all # none
max_iter        = 200
poly_ord        = 5
kspace          = 200
precond         = dom_decomp
drop            = 1.00e-4
ilut_fill       = 4
tol             = 1.e-10
keep_info       = 1

[../time_discretization]
method          = BDF
initialtime		= 0.0
endtime			= 0.6
timestep		= 0.001
BDF_order		= 1
theta           = 0.5
gamma            = 0.5
rhoInf          = 1
typeOfGeneralizedAlpha            = HHT


[../prec]
prectype        = Ifpack
displayList     = false

[./ifpack]
prectype        = Amesos
overlap         = 4

[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[../] # ifpack
[../] # prec

[jacobian]

solver   = gmres;
poly_ord = 5;
kspace   = 40;
conv     = rhs;

[eigensolver]

nevec = 10
block_size = 1;
max_blocks = 1000;
max_restarts = 1000;
tol = 1e-5;
which = ML
neval = 5

[DD2Levels]
displayList                 = false
  [./ML]
  default_parameter_list  = DD
  max_levels              = 2
  inc_or_dec              = increasing
    [./smoother]
    type                    = IFPACK
    pre_or_post             = pre
    ifpack_overlap          = 0
    [../coarse]
    type                    = Gauss-Seidel
    sweeps                  = 1
    pre_or_post             = both
    [../aggregation]
    type                    = Zoltan #METIS
    nodes_per_aggregate     = 200
  [../]
[../]


[DD2Levels2]
displayList                 = false
  [./ML]
  default_parameter_list  = DD
  max_levels              = 2
  inc_or_dec              = increasing
    [./smoother]
    type                    = IFPACK
    pre_or_post             = pre
    ifpack_overlap          = 0
    [../coarse]
    type                    = Gauss-Seidel
    sweeps                  = 1
    pre_or_post             = both
    [../aggregation]
    type                    = METIS
    nodes_per_aggregate     = 200
  [../]
[../]


[PCDLaplacian]
displayList                 = false
  [./ML]
  default_parameter_list  = SA
  inc_or_dec              = increasing
    [./smoother]
    type                    = 'symmetric Gauss-Seidel'
    pre_or_post             = pre
    ifpack_overlap          = 0
    [../coarse]
    type                    = Amesos-KLU
    max_size                = 500
    [../aggregation]
    ## Uncoupled-MIS (Default)
    threshold     = 0.01
  [../]
[../]


[Ifpack]
[./ifpack]
prectype        = Amesos
overlap         = 4

[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[../] # ifpack
[../]