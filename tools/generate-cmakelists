#! /usr/bin/env python
# author: Antonio Cervone <ant.cervone@gmail.com>
# date: 11-03-2012

import os
import re

# modules to work on
module_list = [
  'core',
  'darcy',
  'bc_interface',
  'level_set',
  'navier_stokes',
  'structure',
  'fsi',
  'one_d_hyperbolic',
  'zero_dimensional',
  'heart'
]

# directories to exclude since they do not contain sources
exclude_list = [
  'cmake',
  'data',
  'example',
  'testsuite'
]

for module in module_list:
  print 'module: ' + module
  module_path='lifev/' + module

  for dir in os.listdir( module_path ):
    is_src_dir = True

    # exclude non dirs
    src_dir = os.path.join( module_path, dir )
    if ( not os.path.isdir( src_dir ) ):
      is_src_dir = False

    # exclude dirs in exclude_list
    for exclude_dir in exclude_list:
      if( dir == exclude_dir):
        is_src_dir = False

    # this is a source directory
    if ( is_src_dir ):
      print 'source dir: ' + dir

      # find header and source files
      headers = []
      sources = []
      for file in os.listdir( src_dir ):
        if ( re.search( '\.hpp$', file ) ):
          headers.append( file )
        elif ( re.search( '\.cpp$', file ) ):
          sources.append( file )
      #print headers
      #print sources

      # open file
      f = open( os.path.join( src_dir, 'CMakeLists.txt' ), 'w' )

      # write headers
      f.write( 'SET({dir}_HEADERS\n'.format( dir = dir ) )
      for header_file in headers:
        f.write( '  ' + dir + '/' + header_file + '\n' )
      f.write( 'CACHE INTERNAL "")\n\n' )

      # write sources
      f.write( 'SET({dir}_SOURCES\n'.format( dir = dir ) )
      for source_file in sources:
        f.write( '  ' + dir + '/' + source_file + '\n' )
      f.write( 'CACHE INTERNAL "")\n\n' )

      # generate install rule
      f.write('''
SET(LOCAL_HEADERS)
FOREACH(INC ${{{dir}_HEADERS}})
  STRING(REPLACE "{dir}/" "" LOCAL_INC ${{INC}})
  SET(LOCAL_HEADERS ${{LOCAL_HEADERS}} ${{LOCAL_INC}})
ENDFOREACH()

INSTALL(
  FILES ${{LOCAL_HEADERS}}
  DESTINATION "${{${{PROJECT_NAME}}_INSTALL_INCLUDE_DIR}}/{module_path}/{dir}"
  COMPONENT ${{PACKAGE_NAME}}
)
'''.format( dir = dir, module_path = module_path ) )

