/*!

\page BlockAlgebraPage Block algebra structures


Having block structures can be very useful in many situations, for example when assembling a system or devising a preconditionner.
Blocks are very intuitive structures that help the code the match closer numerical analysis concepts.

There are two ways of implementing block structures

<ol>
<li> The <b> monolithic </b> approach, which consists in building structures that are aware of the blocks but stores
	a monolithic structure. For example, with such an approach, a block matrix is a structure storing the positions of the
	blocks while keeping a unique matrix to represent the global matrix (all the blocks together).
<li> The <b> composite </b> approach, which consists in effectively storing the blocks as different structures. For example, with
	this approach, a block matrix is a structure storing many matrices, each of them representing one of the blocks.
</ol>

As the choice for the most suitable approach depends strongly on the problem at hand, the user is responsible for it.

\image html linear_algebra_monolithic_vs_split.png "The two possible approaches"


\section BlockAlgebraPage_blockMonolithicStructures Monolithic approach

Structures following this approach are:

<ul>
<li> LifeV::MatrixBlockMonolithicEpetra for the matrices
<li> LifeV::VectorBlockMonolithicEpetra for the vectors
</ul>

As these structures derive from their basic counterparts (LifeV::MatrixEpetra and LifeV::VectorEpetra), any functionality working
for the basic structures will work with these block structures (solvers, preconditionners,...).
Moreover, the block structures can be changed at any time without large computation.

<b> First Example </b>

The following example shows the preferred syntax for defining these structures. We will use a Stokes problem to illustrate the use
of these structures. We suppose that the LifeV::FESpace structures have already been defined. We will define a matrix and a vector,
so the corresponding declaration files have to be included:

\code
#include <life/lifearray/MatrixBlockMonolithicEpetra.hpp>
#include <life/lifearray/VectorBlockMonolithicEpetra.hpp>
\endcode

We define then the types that we will use (this is a good practice as it allows to change quickly the approach used):

\code
typedef MatrixBlockMonolithicEpetra<Real> matrix_type;
typedef VectorBlockMonolithicEpetra       vector_type;
\endcode

We suppose now that the maps (LifeV::MapEpetra) for the velocity and the pressure space are defined, using e.g. the map
of the corresponding LifeV::FESpace:

\code
MapEpetra uMap(...);
MapEpetra pMap(...);
\endcode

To define the matrix and the vector, the syntax is very simple:

\code
matrix_type systemMatrix( uMap | pMap );
vector_type rightHandSide( uMap | pMap );
\endcode

Note here the usage of <b> the "|" operator that separates the blocks</b> (the number of blocks that can be used is unlimited).
Now, we can access the blocks:

\code
systemMatrix.block(0,0) ...
systemMatrix.block(1,0) ...
rightHandSide.block(1) ...
\endcode

<b> Second Example </b>

For this second example, we suppose that instead of the map (LifeV::MapEpetra) that contained
all the components of the velocity, we have three different maps, one for each component (the velocity is supposed to be 3D):

\code
MapEpetra uxMap(...);
MapEpetra uyMap(...);
MapEpetra uzMap(...);
MapEpetra pMap(...);
\endcode

We can then define the system using the same syntax as before:

\code
matrix_type componentMatrix( uxMap | uyMap | uzMap | pMap );
vector_type componentRHS( uxMap | uyMap | uzMap | pMap );
\endcode

The matrix will now contain 4x4 blocks and the vector 4 blocks. This might be useful if some blocks
are exactly the same (e.g. the ux-ux, uy-uy and uz-uz blocks). One can then compute one of the blocks and copy it into the other blocks (using utilities defined in LifeV::MatrixBlockUtils).

However, if for some reason, one wants to define the system as in the first example, one can use the "+" operator, that has the effect of fusioning the blocks
(actually, it concatenates the maps):

\code
matrix_type fusionMatrix( (uxMap + uyMap + uzMap) | pMap );
vector_type fusionRHS( (uxMap + uyMap + uzMap) | pMap );
\endcode

Now, the matrix has again a 2x2 block structure while the vector has 2 blocks. The usage of parentheses around the blocks to be fusioned is warmly recommended in order not to have to deal with operator priorities. Some compilers might even rise a warning if parentheses are not used.

Remark that it is possible to change the block structure for a low computational cost at any time using the setBlockStructure methods:

\code
componentMatrix.setBlockStructure( (uxMap + uyMap + uzMap) | pMap );
componentRHS.setBlockStructure( (uxMap + uyMap + uzMap) | pMap );
\endcode

\section BlockAlgebraPage_blockCompositeStructures Composite approach

These structures have not been implemented yet in LifeV.

*/

