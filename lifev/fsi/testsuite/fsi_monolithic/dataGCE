# -*- getpot -*- (GetPot mode activation for emacs)
#-------------------------------------------------
#      Data file for CE FSI Solver
#-------------------------------------------------

[problem]

blockOper   = AdditiveSchwarz
# OPTIONS:
#AdditiveSchwarz
#AdditiveSchwarzRN
#AdditiveSchwarzGI
#AdditiveSchwarzRNGI

DDBlockPrec = ComposedDN
# OPTIONS:
#AdditiveSchwarz: monolithic A-S preconditioner,
#AdditiveSchwarzGI: monolithic A-S preconditioner,
#ComposedDN: modular Dirichlet-Neumann preconditioner
#ComposedDN2: modular Dirichlet-Neumann preconditioner
#ComposedNN: modular Neumann-Neumann + Dirichlet-Dirichlet preconditioner
#ComposedDNND: modular Dirichlet-Neumann + Neumann-Dirichlet preconditioner
#ComposedDNGI: modular preconditioner for the geometric implicit, split in 3 factors
#ComposedDN2GI: modular preconditioner for the geometric implicit, split in 3 factors
#ComposedDNDGI: under testing, do not use
#ComposedDND2GI: under testing, do not use

method     = monolithicGE # monolithicGE, monolithicGI

reducedFluid = 0 # 0 = exact, 1 = inexact
defOmega   = 0.01 # usually 0.01 for precond = 0 or 1; -1 for precond = 2
defOmegaS  = 0.01 # matters only with  precond = 2
defOmegaF  = 0.01 # matters only with  precond = 2
# only for fixed point and exactJacobian:
# if updateEvery == 1, normal fixedPoint algorithm
# if updateEvery  > 1, recompute computational domain every M_updateEvery iterations (transpiration)
# if updateEvery <= 0, recompute computational domain and matrices only at first subiteration (semi-implicit).
#                        Deprecated when using exactJacobian (better to set ifSemiImplicit=1)
updateEvery = 1
linesearch = 0
# NonLinearRichardson: stop_tol  = abstol + reltol*normRes;
abstol     =  0. # tolerance in nonLinearRichardson
reltol     =  1.e-5 # tolerance in nonLinearRichardson

restart    = 0
maxSubIter = 20
fluidMeshPartitioned = none
solidMeshPartitioned = none

[exporter]
multimesh  = false   # actually we export also the displacement
start      = 0
save       = 1
type       = hdf5
nRestart   = 0

[./fluid]
filename   = fluid
[../solid]
filename   = solid
[../] # solid
[../] # exporter

[importer]
type       = hdf5
[./fluid]
filename   = fluid
[../solid]
filename   = solid
[../] # solid
# [../] # importer

[fluid]
useShapeDerivatives           = false
semiImplicit                  = true # tells if we advance in time after the first nonlinear iteration or not
domainVelImplicit             = false  # tells if the domain vel is to be considered implicitly in the convective term
convectiveTermDer             = false  # tells if the velocity is to be considered implicitly in the convective term

[./physics]
density   = 1.0               # density
viscosity = 0.03              # viscosity

[../time_discretization]
initialtime     = 0.
endtime         = 0.004
timestep        = 0.001
BDF_order       = 1

[../space_discretization]
mesh_dir  = ./
mesh_file = tube20.mesh
vel_order       = P1            # P1, P1Bubble, P2
press_order     = P1            # P1, P2
stiff_strain    = true

[../miscellaneous]
verbose   = 1
velname   = vel
pressname = press
steady    = 0
factor    = 1

[../ipstab]
gammaBeta  = 1
gammaDiv   = 0.2
gammaPress = 0.05
reuse = true
[../] # physics
[../] # fluid

[interface]
fluid_flag      =  1 # default: 1
tolerance       =  0 # how far points are to be considered the same on the interface
[../] # interface

[solid]

useExactJacobian = false # always false for linear structure model. Otherwise it allows to chose beween an exact-inexact
                         # Newton scheme

[./physics]

solidType = linearVenantKirchhof #NOTE: the nonlinear choice is not available (still in development)
# either linearVenantKirchhof or nonLinearVenantKirchhof (the last one still in development)
material_flag = 1
density   = 1.2
young     = 4.0E6
poisson   = 0.45


[../time_discretization]
initialtime     = 0.
endtime         = 0.004
timestep        = 0.001
BDF_order       = 1

[../space_discretization]
mesh_dir  = ./ #test_tubes/  # the directory where the mesh file is
mesh_file = vessel20.mesh  # mesh file
order     = P1


[../miscellaneous]
factor    = 12
verbose   = 1
depname   = dep


[../newton]
maxiter = 1
abstol  = 1.e-8
linesearch = 0



[linear_system]

[./solver]
output          = all # none
max_iter        = 200
poly_ord        = 5
kspace          = 200
precond         = dom_decomp
drop            = 1.00e-4
ilut_fill       = 2
tol             = 1.e-6


[./aztecoo]
reordering         = 1 # rcm
precond            = dom_decomp
subdomain_solve    = ilut
ilut_fill          = 4.e+0
drop               = 1.e-5
athresh            = 1.e-3
rthresh            = 1.e-3
reuse              = 1
displayList        = false

[../] # aztecoo

[../prec]
reuse           = false
prectype        = Composed
rescale_factor = 1. # solid matrix rescale factor
displayList     = true
entry           = 0.0

[./robin]
alphaf = 0.
alphas = 0.5 # parameters for Robin-Robin DDBlock preconditioner

[../Composed]
list                = 'Ifpack Ifpack'
sections            = 'Ifpack1 Ifpack2'

[../ML1] # preconditioner for the first factor in case our choice was ML
displayList = false
default_parameter_list = SA    # for ML precond, SA, DD, DD-ML, maxwell, NSSA, DD-ML-LU, DD-LU
prec_type =  MGV # MGV
    # one-level-postsmoothing , two-level-additive
    # two-level-hybrid , two-level-hybrid2
max_levels = 10
inc_or_dec = increasing

[./energy_minimization]
enable = true
type   = 2

#####THE FOLLOWING IS TAKEN BY THE MAXWELL EXAMPLE#########
[../repartition]
enable              = 1
node_max_min_reatio = 1.1
node_min_per_proc   = 64
max_min_ratio       = 1.1
min_per_proc        = 20
partitioner         = ParMETIS #Zoltan: to be implemented
##Zoltan_dimensions = 3

[../aggregation]
type                = METIS
treshold            = 0.0
nodes_per_aggregate = 32

[../coarse]
max_size            = 60
type                = Amesos-KLU
################

[../smoother]
type = IFPACK # IFPACK, Aztec
pre_or_post = pre
[../] # end of ML1




[../ML2]  # preconditioner for the second factor in case our choice was ML
default_parameter_list = NSSA    # for ML precond, SA, DD, DD-ML, maxwell, NSSA, DD-ML-LU, DD-LU
displayList = true
prec_type = MGV # MGV, MGW
          # one-level-postsmoothing , two-level-additive
          # two-level-hybrid , two-level-hybrid2

max_levels = 3
inc_or_dec = increasing

[./energy_minimization]
enable = true
type   = 2

#####THE FOLLOWING IS TAKEN BY THE MAXWELL EXAMPLE#########
[../repartition]
enable              = true
node_max_min_reatio = 1.1
node_min_per_proc   = 64
max_min_ratio       = 1.1
min_per_proc        = 20
partitioner         = ParMETIS #Zoltan: to be implemented
##Zoltan_dimensions   = 3

[../aggregation]
type                = METIS
treshold            = 0.0
nodes_per_aggregate = 32

[../coarse]
max_size            = 60
#type                = Amesos-KLU
################

[../smoother]
type = IFPACK # Aztec, IFPACK
##pre_or_post = pre

[../] # end of ML2




[../Ifpack1]  # preconditioner for the first factor in case our choice was Ifpack
prectype        = Amesos
overlap         = 2

[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[../partitioner]
overlap = 2

[../schwarz]
reordering_type = none #metis, rcm, none
flter_singletons = true

[../] # Ifpack1



[../Ifpack2]   # preconditioner for the second factor in case our choice was Ifpack
prectype        = Amesos
overlap         = 2

[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[../partitioner]
overlap = 2

[../schwarz]
reordering_type = none #metis, rcm, none
flter_singletons = true

[../] # Ifpack2



[../ifpack] # if Ifpack, and if the preconditioner was not of type "Composed"
prectype        = Amesos
overlap         = 2

[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[../partitioner]
overlap = 2

[../schwarz]
reordering_type = none #metis, rcm, none
flter_singletons = true

[../] # ifpack

[../ML] #if ML, and if the preconditioner was not of type "Composed"
default_parameter_list = DD-ML    # for ML precond, SA, DD, DD-ML, maxwell, NSSA, DD-ML-LU, DD-LU
prec_type = MGV # MGV
max_levels = 2

[energy_minimization]
enable = 0
type   = 2

#####THE FOLLOWING IS TAKEN BY THE MAXWELL EXAMPLE#########
[./repartition]
enable              = 0
node_max_min_reatio = 1.1
node_min_per_proc   = 64
max_min_ratio       = 1.1
min_per_proc        = 20
partitioner         = ParMETIS #Zoltan: to be implemented
##Zoltan_dimensions   = 3

[../aggregation]
type                = METIS
treshold            = 0.0
nodes_per_aggregate = 32

[../coarse]
max_size            = 60
## type                = Amesos-KLU
################

[../smoother]
type = Ifpack
pre_or_post = pre

[../] # end if ML
[../] # prec
# end of preconditioner part

[mesh_motion]

[./solver]
output          = all # none
max_iter        = 200
poly_ord        = 5
kspace          = 40
precond         = dom_decomp
drop            = 1.00e-4
ilut_fill       = 4
tol             = 1.e-10
keep_info       = 1

[../prec]
prectype        = Ifpack
rescale_factor  = 1.e-2 # solid matrix rescale factor
displayList     = false

[./ifpack]
prectype        = Amesos
overlap         = 4

[./fact]
level-of-fill                 = 10
ilut_level-of-fill            = 4
drop_tolerance                = 1.e-10
relax_value                   = 0

[../amesos]
solvertype = Amesos_Umfpack

[../] # ifpack
[../] # prec

[jacobian]

solver   = gmres;
poly_ord = 5;
kspace   = 40;
conv     = rhs;

[eigensolver]

nevec = 10
block_size = 1;
max_blocks = 1000;
max_restarts = 1000;
tol = 1e-5;
which = ML
neval = 5
